{
  "openapi": "3.0.2",
  "info": {
    "title": "Requests mangement - OpenAPI 3.0.2",
    "description": "API for creating managing and approving requests",
    "version": "1.0.0"
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost/"
    }
  ],
  "tags": [
    {
      "name": "requests"
    }
  ],
  "paths": {
    "/requests/{Id}": {
      "put": {
        "tags": [
          "request"
        ],
        "summary": "Update an existing request",
        "description": "Update an existing request by Id",
        "operationId": "update",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The request ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestResolve"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestResolve"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RequestResolve"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Reqest not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "request"
        ],
        "summary": "Find request by ID",
        "description": "Returns a single request",
        "operationId": "getRequestById",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Request not found"
          }
        }
      },
      "delete": {
        "tags": [
          "request"
        ],
        "summary": "Deletes a request",
        "description": "delete a request",
        "operationId": "deleteRequest",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request value"
          }
        }
      }
    },
    "/requests": {
      "post": {
        "tags": [
          "request"
        ],
        "summary": "Add a request",
        "description": "Add a new request",
        "operationId": "addRequest",
        "requestBody": {
          "description": "Create a new request in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "request"
        ],
        "summary": "Finds Requets by status",
        "description": "Requests status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "Active",
              "enum": [
                "Active",
                "Resolved"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Request"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Request"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "username"
          },
          "email": {
            "type": "string",
            "example": "user@exmple.com"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "Active",
            "enum": [
              "Active",
              "Resolved"
            ]
          },
          "message": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id"
        ]
      },
      "RequestCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "username"
          },
          "email": {
            "type": "string",
            "example": "user@exmple.com"
          },
          "message": {
            "type": "string",
            "eample": "Test user message"
          }
        },
        "required": [
          "message", "name", "email"
        ]
      },
      "RequestResolve": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "username"
          },
          "email": {
            "type": "string",
            "example": "user@exmple.com"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "Active",
            "enum": [
              "Active",
              "Resolved"
            ]
          },
          "message": {
            "type": "string",
            "eample": "Test user message"

          },
          "comment": {
            "type": "string",
            "eample": "Test manager comment"
          }
        },
        "required": [
          "message", "name", "email",
          "id", "status", "comment"
        ]
      }
    }
  }
}